

<p>I ran into a problem where I have a great GPU at home but I do my model finetuning from my laptop too often. In this blog post, I will walkthrough my setup to solve this with Docker, Traefik, Jupyter, and Tailscale.</p>

<p>This setup ensures that I can do finetuning (or inference or any other FLOP-intensive tasks) by turning my home computer into a VPS serving a Jupyter webapp. We have 2 security measures: encryption with https protocol and attack-surface-reduction with VPN.</p>

<h2>Prerequisites</h2>

<p>Before we begin, ensure you have the following installed and configured:</p>
<ul>
    <li><strong>Docker and Docker Compose:</strong> A Docker installation for your OS is needed. If you are somewhat familiar with networking, this setup is a multi-container/single-node setup. We can implement multi-node with k8s/k3d at a later time.</li>
    <li><strong>Tailscale:</strong> Sign up for a free Tailscale account and install it on your local machine and whichever devices you wish to add. You will need to manually add your devices into the VPN from the Tailscale webpage. For personal uses, Tailscale is completely free!</li>
</ul>

<h2>The Architecture</h2>

<p>Our setup will consist of three main components orchestrated by Docker Compose:</p>
<ol>
    <li><strong>Jupyter:</strong> The main webapp for your data science and ML project needs. If you have only ran Jupyter on localhost before, this will be your first time deploying it to be accessed from another machine.</li>
    <li><strong>Traefik:</strong> A cloud-native reverse proxy that will automatically discover and route traffic to our Jupyter container. It acts as the gateway and load balancer to route traffic correctly to the Jupyter container. It will be configured to listen for traffic coming from our secure Tailscale network.</li>
    <li><strong>Tailscale:</strong> Under the hood, this is a VPN service that implements Wireguard for you with mesh networking. This will create a secure network (a "tailnet") between your registered devices. While this is cumbersome, it also ensure the Jupyter instance will only be accessible from devices you manually added to the tailnet.</li>
</ol>

<h2>The <code>docker-compose.yml</code> File</h2>

<p>Let's dive into the core of our setup, the <code>docker-compose.yml</code> file. This file will define and configure our three services.</p>

<pre><code>
services:
    traefik:
        image: "traefik:v2.10"
        container_name: "traefik"
        command:
            - "--api.insecure=true"
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--entrypoints.web.address=:80"
        ports:
            - "8080:8080" # Traefik Dashboard (for debugging, you can access it at localhost:8080 after spun up)
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock:ro" #mount a virtual drive onto your hard drive 
        networks:
            - proxy_traefik # Docker compose will now create a mini-cluster (or LAN) with the name of "proxy_traefik"

    #now that Docker has Traefik spun up in its own Docker "LAN" of proxy_traefik, we spin up the Jupyter component and add it to the "LAN"
    jupyter:
        image: "jupyter/scipy-notebook:latest"
        container_name: "jupyter"
        command: ["start.sh", "jupyter", "lab", "--NotebookApp.token='jupyter'"] #prompted password is jupyter at landing page
        environment:
            - JUPYTER_ENABLE_LAB=yes
        labels: #by adding these labels, we are telling Docker to inform Traefik that this component is to join the "LAN" designated in networks below and that Traefik will be the reverse proxy routing traffic to it 
            - "traefik.enable=true"
            - "traefik.http.routers.jupyter.rule=Host(`your-home-machine.tail.ts.net`)" # Use your Tailscale magicDNS domain name 
            # when you are routed to your home machine from within the VPN, the request is resolved by your computer towards Docker desktop which again reroute you to the Traefik service to attempt to resolve. As Traefik kept track that the Jupyter server told it to route any `your-home-machine.tail.ts.net` traffic towards itself, it will then reroute using the docker compose "LAN" internal IP address towards Jupyter. This finally connects us to the Jupyter running in a Docker composed container in the desktop.
            # by the way, note that we can also tell Traefik to resolve for Host(`your-home-machine.tail.ts.net`) && PathPrefix(`/app-slug`) towards your own selfhosted app! Unfortunately, some apps may bug out with static assets referencing with this approach so be mindful.
            - "traefik.http.routers.jupyter.entrypoints=websecure" #we tell Traefik to redirect to https for any access repquest
            - "traefik.http.services.jupyter.loadbalancer.server.port=8888" #we tell Traefik to LB towards port 8888 of the container which is Jupyter's access port by default
        networks:
            - proxy
        restart: unless-stopped

networks:
    proxy_traefik:
      name: proxy_traefik
</code></pre>

<h2>Breaking Down the Configuration</h2>

<p>Let's examine each service in the <code>docker-compose.yml</code> file.</p>

<h3>Traefik</h3>
<ul>
    <li><strong><code>image: "traefik:v2.10"</code>:</strong> We are using a specific version of the official Traefik image.</li>
    <li><strong><code>command</code>:</strong> These flags configure Traefik:
        <ul>
            <li><code>--api.insecure=true</code>: This exposes the Traefik dashboard on port 8080 for debugging purposes. <strong>For production environments, you should secure this with a password.</strong></li>
            <li><code>--providers.docker=true</code>: This tells Traefik to look for container labels to discover services.</li>
            <li><code>--providers.docker.exposedbydefault=false</code>: We will explicitly enable Traefik for our Jupyter container using labels.</li>
            <li><code>--entrypoints.web.address=:80</code>: This defines an entry point named <code>web</code> on port 80.</li>
        </ul>
    </li>
    <li><strong><code>ports: - "8080:8080"</code>:</strong> This maps the Traefik dashboard port to the host.</li>
    <li><strong><code>volumes: - "/var/run/docker.sock:/var/run/docker.sock:ro"</code>:</strong> This gives Traefik read-only access to the Docker socket, allowing it to listen for container events.</li>
    <li><strong><code>networks: - proxy</code>:</strong> Places the Traefik container on our custom <code>proxy</code> network.</li>
</ul>

<h3>Jupyter</h3>
<ul>
    <li><strong><code>image: "jupyter/scipy-notebook:latest"</code>:</strong> We're using a Jupyter image that includes common scientific computing libraries.</li>
    <li><strong><code>command: ["start.sh", "jupyter", "lab", "--NotebookApp.token=''"]</code>:</strong> This command starts the Jupyter Lab interface and disables token authentication. Since we are securing access with Tailscale, we can simplify the Jupyter setup. <strong>Do not do this if your service is exposed to the public internet.</strong></li>
    <li><strong><code>environment: - JUPYTER_ENABLE_LAB=yes</code>:</strong> Ensures Jupyter Lab is enabled.</li>
    <li><strong><code>labels</code>:</strong> This is where the magic of Traefik's auto-discovery happens:
        <ul>
            <li><code>"traefik.enable=true"</code>: Tells Traefik to expose this container.</li>
            <li><code>"traefik.http.routers.jupyter.rule=Host(`jupyter-server`)"</code>: This creates a router named <code>jupyter</code> and tells Traefik to route traffic for the hostname <code>jupyter-server</code> to this container. This hostname matches the hostname we set for our Tailscale container.</li>
            <li><code>"traefik.http.routers.jupyter.entrypoints=web"</code>: Associates this router with the <code>web</code> entry point we defined in the Traefik configuration.</li>
            <li><code>"traefik.http.services.jupyter.loadbalancer.server.port=8888"</code>: Informs Traefik that the Jupyter service is running on port 8888 inside the container.</li>
        </ul>
    </li>
    <li><strong><code>networks: - proxy</code>:</strong> Places the Jupyter container on the <code>proxy</code> network, allowing Traefik to route traffic to it.</li>
    <li><strong><code>restart: unless-stopped</code>:</strong> Ensures the Jupyter container restarts if it crashes.</li>
</ul>

<h2>Bringing It All Up</h2>
<ol>
    <li><strong>Signup your Tailscale account at</strong><a href="https://tailscale.com"></a>.</li>
    <li><strong>Download Tailscale app on whichever desktop, laptop, or phone you want to add to the VPN. Manually add the device to the VPN from the Tailscale webpage. Copy the magicDNS url to be pasted into Jupyter's compose yml file.</li>
    <li><strong>In your home desktop CLI, run 'tailscale serve --bg' for serving https onto the VPN (specifically, port 443 will listen to https routed from the Tailscale url).</li>
    <li><strong>Create a directory</strong> for your project and save the <code>docker-compose.yml</code> file inside it.</li>
    <li><strong>Run the command:</strong>
        <pre><code>docker compose up --build -d</code></pre>
    </li>
</ol>
<p>This will pull the necessary images and start the containers in the background.</p>

<h2>Accessing Your Secure Jupyter Lab</h2>
<p>Once the containers are running, you can access your Jupyter Lab instance.</p>
<ol>
    <li><strong>Ensure Tailscale is up and happy</strong> on your local machine .</li>
    <li>Open your web browser and navigate to the url you had Traefik pointing towards your Jupyter instance.</li>
</ol>
<p>You should be greeted by the Jupyter Lab interface, accessible only from devices on your Tailscale network. The only bottleneck now is the latency and bandwidth your ISP facilitates for your home Internet!</p>

<h2>TL;DR</h2>
<p>Use Tailscale - it's free, it works, and it's robust. Tell your Traefik to route from Tailscale's provided url. Copy/paste the docker-compose for a quick spin up. Have fun!</p>
